version: "3.7"
x-all: &all
  hostname: ${HOSTNAME}
  environment:
    PUID: ${PUID}
    PGID: ${PGID}
    TZ: ${TZ}
  networks:
    - traefik
services:
  # Use Docker Compose instead of Swarm for device support
  plex:
    # <<: *all
    image: linuxserver/plex
    hostname: ${HOSTNAME}
    volumes:
      - ${ROOT}/docker/plex/config:/config
      - ${ROOT}/docker/plex/transcode:/transcode
      - ${ROOT}/data:/data:rslave
      # - /dev/dri:/dev/dri # why it no work
    ports:
      - "10000:32400/tcp"
      - "3005:3005/tcp"
      - "8324:8324/tcp"
      - "32469:32469/tcp"
      - "1900:1900/udp"
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32414:32414/udp"
      - "10007:33400/tcp"
    environment: # yaml y u no extend :(
      VERSION: latest
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
    devices:
      - /dev/dri:/dev/dri
  deluge:
    <<: *all
    image: linuxserver/deluge:5b398f77-ls22 # Pin Deluge version until 2.x runs properly on USB
    volumes:
      - ${ROOT}/docker/deluge/config:/config
      - ${ROOT}/data:/data:rslave
      - ${ROOT}/docker/shared/blackhole:/blackhole
    ports:
      - "58846:58846"
      - "54794:54794"
      - "54795:58846"
    deploy:
      labels:
        traefik.enable: "true"
        traefik.docker.network: traefik
        traefik.http.routers.deluge-web.entrypoints: https
        traefik.http.routers.deluge-web.tls.certresolver: cloudflare
        traefik.http.routers.deluge-web.rule: Host(`deluge-web.bas.sh`)
        traefik.http.routers.deluge-web.service: deluge-web
        traefik.http.services.deluge-web.loadbalancer.server.port: 8112
        traefik.http.routers.deluge-daemon.entrypoints: https
        traefik.http.routers.deluge-daemon.tls.certresolver: cloudflare
        traefik.http.routers.deluge-daemon.rule: Host(`deluge-daemon.bas.sh`)
        traefik.http.routers.deluge-daemon.service: deluge-daemon
        traefik.http.services.deluge-daemon.loadbalancer.server.port: 58846
  jackett:
    <<: *all
    image: linuxserver/jackett:development
    volumes:
      - ${ROOT}/docker/jackett/config:/config/Jackett
      - ${ROOT}/docker/shared/blackhole:/downloads
    deploy:
      labels:
        traefik.enable: "true"
        traefik.docker.network: traefik
        traefik.http.routers.jackett.entrypoints: https
        traefik.http.routers.jackett.tls.certresolver: cloudflare
        traefik.http.routers.jackett.rule: Host(`jackett.bas.sh`)
        traefik.http.services.jackett.loadbalancer.server.port: 9117
  sonarr:
    <<: *all
    image: linuxserver/sonarr:preview
    volumes:
      - ${ROOT}/docker/sonarr/config:/config
      - ${ROOT}/data:/data:rslave
    deploy:
      labels:
        traefik.enable: "true"
        traefik.docker.network: traefik
        traefik.http.routers.sonarr.entrypoints: https
        traefik.http.routers.sonarr.tls.certresolver: cloudflare
        traefik.http.routers.sonarr.rule: Host(`sonarr.bas.sh`)
        traefik.http.services.sonarr.loadbalancer.server.port: 8989
  radarr:
    <<: *all
    image: linuxserver/radarr:preview
    volumes:
      - ${ROOT}/docker/radarr/config:/config
      - ${ROOT}/data:/data:rslave
    deploy:
      labels:
        traefik.enable: "true"
        traefik.docker.network: traefik
        traefik.http.routers.radarr.entrypoints: https
        traefik.http.routers.radarr.tls.certresolver: cloudflare
        traefik.http.routers.radarr.rule: Host(`radarr.bas.sh`)
        traefik.http.services.radarr.loadbalancer.server.port: 7878
  tautulli:
    <<: *all
    image: linuxserver/tautulli
    volumes:
      - ${ROOT}/docker/tautulli/config:/config
      # TODO: Add Plex logs folder here, map to /logs
    deploy:
      labels:
        traefik.enable: "false"
        traefik.docker.network: traefik
        traefik.http.routers.tautulli.entrypoints: https
        traefik.http.routers.tautulli.tls.certresolver: cloudflare
        traefik.http.routers.tautulli.rule: Host(`tautulli.bas.sh`)
        traefik.http.services.tautulli.loadbalancer.server.port: 8181
  kitana:
    <<: *all
    image: pannal/kitana
    volumes:
      - ${ROOT}/docker/kitana:/app/data
    command:
      - "-P"
    deploy:
      labels:
        traefik.enable: "true"
        traefik.docker.network: traefik
        traefik.http.routers.kitana.entrypoints: https
        traefik.http.routers.kitana.tls.certresolver: cloudflare
        traefik.http.routers.kitana.rule: Host(`kitana.bas.sh`)
        traefik.http.services.kitana.loadbalancer.server.port: 31337
  thelounge:
    <<: *all
    image: linuxserver/thelounge
    volumes:
      - ${ROOT}/docker/thelounge/config:/config
    deploy:
      labels:
        traefik.enable: "true"
        traefik.docker.network: traefik
        traefik.http.routers.thelounge.entrypoints: https
        traefik.http.routers.thelounge.tls.certresolver: cloudflare
        traefik.http.routers.thelounge.rule: Host(`irc.bas.sh`)
        traefik.http.services.thelounge.loadbalancer.server.port: 9000
  resilio:
    <<: *all
    image: linuxserver/resilio-sync
    volumes:
      - ${ROOT}/docker/resilio:/config
      - ${ROOT}/data/resilio/downloads:/downloads
      - ${ROOT}/data:/sync
    ports:
      - "55555:55555"
    deploy:
      labels:
        traefik.enable: "true"
        traefik.docker.network: traefik
        traefik.http.routers.resilio.entrypoints: https
        traefik.http.routers.resilio.tls.certresolver: cloudflare
        traefik.http.routers.resilio.rule: Host(`sync.bas.sh`)
        traefik.http.services.resilio.loadbalancer.server.port: 8888
  rubytaco:
    <<: *all
    image: linuxserver/nginx
    volumes:
      - ${ROOT}/docker/nginx/config:/config
      - ${ROOT}/data/web/rubyta.co:/config/www
    deploy:
      labels:
        traefik.enable: "true"
        traefik.docker.network: traefik
        traefik.http.routers.rubytaco.entrypoints: https
        traefik.http.routers.rubytaco.tls.certresolver: cloudflare
        traefik.http.routers.rubytaco.rule: Host(`rubyta.co`)
        traefik.http.services.rubytaco.loadbalancer.server.port: 80
  bas:
    <<: *all
    image: linuxserver/nginx
    volumes:
      - ${ROOT}/docker/nginx/config:/config
      - ${ROOT}/data/web/bas.sh:/config/www
    deploy:
      labels:
        traefik.enable: "true"
        traefik.docker.network: traefik
        traefik.http.routers.bas.entrypoints: https
        traefik.http.routers.bas.tls.certresolver: cloudflare
        traefik.http.routers.bas.rule: Host(`bas.sh`)
        traefik.http.services.bas.loadbalancer.server.port: 80
  bas-files:
    <<: *all
    image: costela/atto
    volumes:
      - ${ROOT}/data/web/files.bas.sh:/www
    deploy:
      labels:
        traefik.enable: "true"
        traefik.docker.network: traefik
        traefik.http.routers.bas-files.entrypoints: https
        traefik.http.routers.bas-files.tls.certresolver: cloudflare
        traefik.http.routers.bas-files.rule: Host(`files.bas.sh`)
        traefik.http.services.bas-files.loadbalancer.server.port: 8080
  unoforbash:
    <<: *all
    image: unoforbash
    ports:
      - "4321:4321"
    deploy:
      labels:
        traefik.enable: "true"
        traefik.docker.network: traefik
        traefik.tcp.routers.unoforbash.entrypoints: uno
        traefik.tcp.routers.unoforbash.rule: HostSNI(`*`)
        traefik.tcp.services.unoforbash.loadbalancer.server.port: 4321
  mc-tofuzoom:
    <<: *all
    image: itzg/minecraft-server
    volumes:
      - ${ROOT}/data/minecraft/tofuzoom:/data
    ports:
      - "25565:25565"
    environment:
      TYPE: "PAPER"
      EULA: "true"
      OVERRIDE_SERVER_PROPERTIES: "true"
      SERVER_NAME: "tofuZoom"
      DIFFICULTY: "normal"
      OPS: "basvdw"
      ICON: "https://cdn.discordapp.com/emojis/699625083219738654.png"
      RCON_PASSWORD: ${RCON_PASSWORD}
      ENABLE_QUERY: "true"
      MAX_PLAYERS: 200
      ENABLE_COMMAND_BLOCK: "true"
      SPAWN_PROTECTION: 0
      MOTD: ':tofuZoom:'
      MEMORY: "12G"
      USE_AIKAR_FLAGS: "true"
      USE_LARGE_PAGES: "true"
    command:
      - "--noconsole"
  traefik:
    <<: *all
    image: traefik
    environment:
      CF_API_EMAIL: hi@bas.sh
      CF_API_KEY: ${CF_API_KEY}
    command:
      - "--api.insecure=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"
      - "--entrypoints.uno.address=:69"
      - "--certificatesresolvers.cloudflare.acme.dnschallenge=true"
      - "--certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.cloudflare.acme.storage=/etc/traefik/acme.json"
      - "--certificatesresolvers.cloudflare.acme.email=hi@bas.sh"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik:/etc/traefik
    ports:
      - "80:80"
      - "443:443"
      - "69:69"
    deploy:
      labels:
        traefik.enable: "true"
        traefik.docker.network: traefik
        traefik.http.routers.traefik.entrypoints: https
        traefik.http.routers.traefik.service: api@internal
        traefik.http.routers.traefik.tls.certresolver: cloudflare
        traefik.http.routers.traefik.rule: Host(`traefik.bas.sh`)
        traefik.http.services.traefik.loadbalancer.server.port: 8080
        traefik.http.routers.http.entrypoints: http
        traefik.http.routers.http.rule: HostRegexp(`{subdomain:[a-z0-9\-]+}.bas.sh`)
        traefik.http.routers.http.middlewares: httpsredirect
        traefik.http.routers.httprubytaco.entrypoints: http
        traefik.http.routers.httprubytaco.rule: Host(`rubyta.co`)
        traefik.http.routers.httprubytaco.middlewares: httpsredirect
        traefik.http.routers.httpbas.entrypoints: http
        traefik.http.routers.httpbas.rule: Host(`bas.sh`)
        traefik.http.routers.httpbas.middlewares: httpsredirect
        traefik.http.middlewares.httpsredirect.redirectscheme.scheme: https

volumes:
  traefik:

networks:
  traefik:
    name: traefik
    attachable: true
