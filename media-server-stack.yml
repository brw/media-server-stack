version: "3.7"
x-all: &all
  hostname: ${HOSTNAME}
  environment:
    PUID: ${PUID}
    PGID: ${PGID}
    TZ: ${TZ}
  networks:
    - traefik
services:
  # Use Docker Compose instead of Swarm for device support maybe?
  plex:
    # <<: *all
    image: linuxserver/plex
    hostname: ${HOSTNAME}
    volumes:
      - ${ROOT}/docker/plex/config:/config
      - ${ROOT}/data:/data:rslave
    ports:
      - "10000:32400/tcp"
      - "3005:3005/tcp"
      - "8324:8324/tcp"
      - "32469:32469/tcp"
      - "1900:1900/udp"
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32414:32414/udp"
      - "10007:33400/tcp"
    environment: # yaml y u no extend :(
      VERSION: latest
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
    devices:
      - /dev/dri:/dev/dri
    deploy:
      labels:
        traefik:
          enable: "true"
          docker.network: traefik
          http:
            services.plex.loadbalancer.server.port: 32400
            routers:
              plex:
                entrypoints: https
                rule: Host(`plex.bas.sh`)
                tls.certresolver: cloudflare
  emby:
    <<: *all
    image: linuxserver/emby
    volumes:
      - ${ROOT}/docker/emby:/config
      - ${ROOT}/data:/data:rslave
    deploy:
      labels:
        traefik:
          enable: "true"
          docker.network: traefik
          http:
            services.emby.loadbalancer.server.port: 8096
            routers:
              emby:
                entrypoints: https
                rule: Host(`emby.bas.sh`)
                tls.certresolver: cloudflare
  jellyfin:
    <<: *all
    volumes:
      - ${ROOT}/docker/jellyfin:/config
      - ${ROOT}/data:/data:rslave
    deploy:
      labels:
        traefik:
          enable: "true"
          docker.network: traefik
          http:
            services.jellyfin.loadbalancer.server.port: 8096
            routers:
              jellyfin:
                entrypoints: https
                rule: Host(`jellyfin.bas.sh`)
                tls.certresolver: cloudflare
  deluge:
    <<: *all
    image: linuxserver/deluge
    volumes:
      - ${ROOT}/docker/deluge/config:/config
      - ${ROOT}/data:/data:rslave
      - ${ROOT}/docker/shared/blackhole:/blackhole
    ports:
      - "58846:58846"
      - "54794:54794"
      - "54795:58846"
    deploy:
      labels:
        traefik:
          enable: "true"
          docker.network: traefik
          http:
            services:
              deluge-web.loadbalancer.server.port: 8112
              loadbalancer.server.port: 58846
            routers:
              deluge-web:
                entrypoints: https
                rule: Host(`deluge-web.bas.sh`)
                service: deluge-web
                tls.certresolver: cloudflare
              deluge-daemon:
                entrypoints: https
                rule: Host(`deluge-daemon.bas.sh`)
                service: deluge-daemon
                tls.certresolver: cloudflare
  jackett:
    <<: *all
    image: linuxserver/jackett:development
    volumes:
      - ${ROOT}/docker/jackett/config:/config/Jackett
      - ${ROOT}/docker/shared/blackhole:/downloads
    deploy:
      labels:
        traefik:
          enable: "true"
          docker.network: traefik
          http:
            services.jackett.loadbalancer.server.port: 9117
            routers:
              jackett:
                entrypoints: https
                rule: Host(`jackett.bas.sh`)
                tls.certresolver: cloudflare
  sonarr:
    <<: *all
    image: linuxserver/sonarr:preview
    volumes:
      - ${ROOT}/docker/sonarr/config:/config
      - ${ROOT}/data:/data:rslave
    deploy:
      labels:
        traefik:
          enable: "true"
          docker.network: traefik
          http:
            services.sonarr.loadbalancer.server.port: 8989
            routers:
              sonarr:
                entrypoints: https
                rule: Host(`sonarr.bas.sh`)
                tls.certresolver: cloudflare
  radarr:
    <<: *all
    image: linuxserver/radarr:nightly
    volumes:
      - ${ROOT}/docker/radarr/config:/config
      - ${ROOT}/data:/data:rslave
    deploy:
      labels:
        traefik:
          enable: "true"
          docker.network: traefik
          http:
            services.radarr.loadbalancer.server.port: 7878
            routers:
              radarr:
                entrypoints: https
                radarr.rule: Host(`radarr.bas.sh`)
                tls.certresolver: cloudflare
  tautulli:
    <<: *all
    image: linuxserver/tautulli
    volumes:
      - ${ROOT}/docker/tautulli/config:/config
      # TODO: Add Plex logs folder here, map to /logs
    deploy:
      labels:
        traefik:
          enable: "false"
          docker.network: traefik
          http:
            services.tautulli.loadbalancer.server.port: 8181
            routers:
              tautulli:
                entrypoints: https
                rule: Host(`tautulli.bas.sh`)
                tls.certresolver: cloudflare
  kitana:
    <<: *all
    image: pannal/kitana
    volumes:
      - ${ROOT}/docker/kitana:/app/data
    command:
      - "-P"
    deploy:
      labels:
        traefik:
          enable: "true"
          docker.network: traefik
          http:
            services.kitana.loadbalancer.server.port: 31337
            routers:
              kitana:
                entrypoints: https
                rule: Host(`kitana.bas.sh`)
                tls.certresolver: cloudflare
  thelounge:
    <<: *all
    image: linuxserver/thelounge
    volumes:
      - ${ROOT}/docker/thelounge/config:/config
    deploy:
      labels:
        traefik:
          enable: "true"
          docker.network: traefik
          http:
            services.thelounge.loadbalancer.server.port: 9000
            routers:
              thelounge:
                entrypoints: https
                rule: Host(`irc.bas.sh`)
                tls.certresolver: cloudflare
  resilio:
    <<: *all
    image: linuxserver/resilio-sync
    volumes:
      - ${ROOT}/docker/resilio:/config
      - ${ROOT}/data/resilio/downloads:/downloads
      - ${ROOT}/data:/sync
      - /mnt/hdd:/sync/hdd
    ports:
      - "55555:55555"
    deploy:
      labels:
        traefik:
          enable: "true"
          docker.network: traefik
          http:
            services.resilio.loadbalancer.server.port: 8888
            routers:
              resilio:
                entrypoints: https
                rule: Host(`sync.bas.sh`)
                tls.certresolver: cloudflare
  ombi:
    <<: *all
    image: linuxserver/ombi:v4-preview
    volumes:
      - ${ROOT}/docker/ombi:/config
    deploy:
      labels:
        traefik:
          enable: "true"
          docker.network: traefik
          http: 
            services.ombi.loadbalancer.server.port: 3579
            routers:
              ombi:
                entrypoints: https
                rule: Host(`ombi.bas.sh`)
                tls.certresolver: cloudflare
  requestrr:
    <<: *all
    image: darkalfx/requestrr
    volumes:
      - ${ROOT}/docker/requestrr:/root/config
    deploy:
      labels:
        traefik:
          enable: "true"
          docker.network: traefik
          http:
            services.requestrr.loadbalancer.server.port: 4545
            routers:
              requestrr:
                entrypoints: https
                rule: Host(`requestrr.bas.sh`)
                tls.certresolver: cloudflare
  bazarr:
    <<: *all
    image: linuxserver/bazarr
    volumes:
      - ${ROOT}/docker/bazarr/config:/config
      - ${ROOT}/data/media/plex/TV:/tv
      - ${ROOT}/data/media/plex/TV-Anime:/tv-anime
      - ${ROOT}/data/media/plex/Movies:/movies
      - ${ROOT}/data/media/plex/Movies-Anime:/movies-anime
    deploy:
      replicas: 0
      labels:
        traefik:
          enable: "true"
          docker.network: traefik
          http:
            services.bazarr.loadbalancer.server.port: 6767
            routers:
              bazarr:
                entrypoints: https
                rule: Host(`bazarr.bas.sh`)
                tls.certresolver: cloudflare
  shokoserver:
    <<: *all
    image: shokoanime/server
    volumes:
      - ${ROOT}/docker/shokoserver:/home/shoko/.shoko
      - ${ROOT}/data/media/plex/TV-Anime:/tv-anime
      - ${ROOT}/data/media/plex/Movies-Anime:/movies-anime
    ports:
      - "8111:8111"
    deploy:
      replicas: 0
      labels:
        traefik:
          enable: "true"
          docker.network: traefik
          http:
            services.shokoserver.loadbalancer.server.port: 8111
            routers:
              shokoserver:
                entrypoints: https
                rule: Host(`shoko.bas.sh`)
                tls.certresolver: cloudflare
  speedtest:
    <<: *all
    image: linuxserver/librespeed
    volumes:
      - ${ROOT}/docker/speedtest:/config
    environment:
      TITLE: "Speedtest | Haring"
      TELEMETRY: "true"
      ENABLE_ID_OBFUSCATION: "true"
      REDACT_IP_ADDRESSES: "true"
      PASSWORD: ${SPEEDTEST_PASSWORD}
      EMAIL: "hi@bas.sh"
      IPINFO_APIKEY: ${IPINFO_APIKEY}
    deploy:
      labels:
        traefik:
          enable: "true"
          docker.network: traefik
          http:
            services.speedtest.loadbalancer.server.port: 80
            routers:
              speedtest:
                entrypoints: https
                rule: Host(`speedtest.bas.sh`)
                tls.certresolver: cloudflare
  rubytaco:
    <<: *all
    image: linuxserver/nginx
    volumes:
      - ${ROOT}/docker/nginx/config:/config
      - ${ROOT}/data/web/rubyta.co:/config/www
    deploy:
      replicas: 0
      labels:
        traefik:
          enable: "true"
          docker.network: traefik
          http:
            services.rubytaco.loadbalancer.server.port: 80
            routers:
              rubytaco:
                entrypoints: https
                rule: Host(`rubyta.co`)
                tls.certresolver: cloudflare
  bas-nginx:
    <<: *all
    image: linuxserver/nginx
    volumes:
      - ${ROOT}/docker/nginx/bas.sh/config:/config
      - ${ROOT}/data/web/bas.sh:/config/www
    deploy:
      labels:
        traefik:
          enable: "true"
          docker.network: traefik
          http:
            services.bas.loadbalancer.server.port: 80
            routers:
              bas:
                entrypoints: https
                rule: Host(`bas.sh`)
                tls.certresolver: cloudflare
  bas-files:
    <<: *all
    image: codeskyblue/gohttpserver
    volumes:
      - ${ROOT}/data/web/files.bas.sh:/app/public
    deploy:
      labels:
        traefik:
          enable: "true"
          docker.network: traefik
          http:
            services.bas-files.loadbalancer.server.port: 8000
            routers:
              bas-files:
                entrypoints: https
                rule: Host(`files.bas.sh`)
                tls.certresolver: cloudflare
  tofuzoom-nginx:
    <<: *all
    image: linuxserver/nginx
    volumes:
      - ${ROOT}/docker/nginx/tofuzoom.com/config:/config
      - ${ROOT}/data/web/tofuzoom.com:/config/www
    deploy:
      labels:
        traefik:
          enable: "true"
          docker.network: traefik
          http:
            services.tofuzoom.loadbalancer.server.port: 80
            routers:
              tofuzoom:
                entrypoints: https
                rule: Host(`tofuzoom.com`)
                tls.certresolver: cloudflare
  tofumang-nginx:
    <<: *all
    image: linuxserver/nginx
    volumes:
      - ${ROOT}/docker/nginx/tofumang.com:/config
      - ${ROOT}/data/web/tofumang.com:/config/www
    deploy:
      labels:
        traefik:
          enable: "true"
          docker.network: traefik
          http:
            services.tofumang.loadbalancer.server.port: 80
            routers:
              tofumang:
                entrypoints: https
                rule: Host(`tofumang.com`)
                tls.certresolver: cloudflare
  # unoforbash:
  #   <<: *all
  #   image: unoforbash
  #   ports:
  #     - "4321:4321"
  #   deploy:
  #     replicas: 0
  #     labels:
  #       traefik:
  #         enable: "true"
  #         docker.network: traefik
  #         tcp.routers.unoforbash.entrypoints: uno
  #         tcp.routers.unoforbash.rule: HostSNI(`*`)
  #         tcp.services.unoforbash.loadbalancer.server.port: 4321
  mc-tofuzoom:
    <<: *all
    image: itzg/minecraft-server:adopt14
    volumes:
      - ${ROOT}/data/minecraft/tofuzoom:/data
    ports:
      - "25565:25565"
      - "25575:25575"
    environment:
      TYPE: "PAPER"
      VERSION: "LATEST"
      EULA: "true"
      OVERRIDE_SERVER_PROPERTIES: "true"
      SERVER_NAME: "tofuZoom"
      DIFFICULTY: "normal"
      OPS: "basvdw"
      ICON: "https://cdn.discordapp.com/emojis/699625083219738654.png"
      ENABLE_RCON: "true"
      RCON_PASSWORD: ${RCON_PASSWORD}
      ENABLE_QUERY: "true"
      MAX_PLAYERS: 420
      ENABLE_COMMAND_BLOCK: "true"
      SPAWN_PROTECTION: 0
      MOTD: ":tofuZoom:"
      MEMORY: "12G"
      USE_AIKAR_FLAGS: "true"
      USE_LARGE_PAGES: "true"
      ALLOW_FLIGHT: "true"
      # ENABLE_AUTOPAUSE: "true"
      # MAX_TICK_TIME: -1
    deploy:
      labels:
        traefik:
          enable: "true"
          docker.network: traefik
          http:
            services:
              tofuzoom-dynmap.loadbalancer.server.port: 8123
              tofuzoom-plan.loadbalancer.server.port: 8804
            routers:
              tofuzoom-dynmap:
                entrypoints: https
                rule: Host(`map.tofuzoom.com`)
                service: tofuzoom-dynmap
                tls.certresolver: cloudflare
              tofuzoom-plan:
                entrypoints: https
                rule: Host(`plan.tofuzoom.com`)
                service: tofuzoom-plan
                tls.certresolver: cloudflare
  mc-tofuzoom-rcon:
    <<: *all
    image: itzg/rcon
    volumes:
      - "${ROOT}/data/minecraft/tofuzoom/rcon:/opt/rcon-web-admin/db"
    ports:
      - "4327:4327"
    environment:
      RWA_USERNAME: ${RWA_USERNAME}
      RWA_PASSWORD: ${RWA_PASSWORD}
      RWA_ADMIN: "true"
      RWA_RCON_HOST: "mc-tofuzoom"
      RWA_SERVER_NAME: "tofuZoom"
      RWA_WEB_RCON: "true"
      RWA_RCON_PASSWORD: "${RCON_PASSWORD}"
    deploy:
      replicas: 0
      labels:
        traefik:
          enable: "true"
          docker.network: traefik
          http:
            services.tofuzoom-rcon.loadbalancer.server.port: 4326
            routers:
              tofuzoom-rcon:
                entrypoints: https
                rule: Host(`rcon.tofuzoom.com`)
                tls.certresolver: cloudflare
  traefik:
    <<: *all
    image: traefik
    environment:
      CF_API_EMAIL: hi@bas.sh
      CF_API_KEY: ${CF_API_KEY}
    command:
      - "--api.insecure=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.swarmmode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"
      - "--entrypoints.uno.address=:69"
      - "--certificatesresolvers.cloudflare.acme.dnschallenge=true"
      - "--certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.cloudflare.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53"
      - "--certificatesresolvers.cloudflare.acme.storage=/etc/traefik/acme.json"
      - "--certificatesresolvers.cloudflare.acme.email=hi@bas.sh"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik:/etc/traefik
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 69
        published: 69
        protocol: tcp
        mode: host
    deploy:
      labels:
        traefik:
          enable: "true"
          docker.network: traefik
          http:
            services.traefik.loadbalancer.server.port: 8080
            middlewares.httpsredirect.redirectscheme.scheme: https
            routers:
              traefik:
                entrypoints: https
                service: api@internal
                rule: Host(`traefik.bas.sh`)
                tls:
                  certresolver: cloudflare
                  domains[0]:
                    main: "bas.sh"
                    sans: "*.bas.sh"
              http:
                entrypoints: http
                rule: HostRegexp(`{subdomain:[a-z0-9\-]+}.bas.sh`)
                middlewares: httpsredirect
              httprubytaco:
                entrypoints: http
                rule: Host(`rubyta.co`)
                middlewares: httpsredirect
              httpbas:
                entrypoints: http
                rule: Host(`bas.sh`)
                middlewares: httpsredirect
              httptofuzoom:
                entrypoints: http
                rule: Host(`tofuzoom.com`)
                middlewares: httpsredirect
                dynmap:
                  entrypoints: http
                  rule: Host(`map.tofuzoom.com`)
                  middlewares: httpsredirect
                plan:
                  entrypoints: http
                  rule: Host(`plan.tofuzoom.com`)
                  middlewares: httpsredirect
              httptofumang:
                entrypoints: http
                rule: Host(`tofumang.com`)
                middlewares: httpsredirect

volumes:
  traefik:

networks:
  traefik:
    name: traefik
    attachable: true
